/*
 * Copyright (c) 2016-2017 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import "rxjs/add/operator/map";
import { Injectable } from "@angular/core";
import { DatagridPropertyComparator } from "../built-in/comparators/datagrid-property-comparator";
import { DatagridPropertyStringFilter } from "../built-in/filters/datagrid-property-string-filter";
import { DatagridStringFilterImpl } from "../built-in/filters/datagrid-string-filter-impl";
import { FiltersProvider } from "./filters";
import { Page } from "./page";
import { Sort } from "./sort";
import { StateDebouncer } from "./state-debouncer.provider";
/**
 * This provider aggregates state changes from the various providers of the Datagrid
 */
var StateProvider = (function () {
    function StateProvider(filters, sort, page, debouncer) {
        var _this = this;
        this.filters = filters;
        this.sort = sort;
        this.page = page;
        this.debouncer = debouncer;
        /**
         * The Observable that lets other classes subscribe to global state changes
         */
        this.change = this.debouncer.change.map(function () { return _this.state; });
    }
    Object.defineProperty(StateProvider.prototype, "state", {
        /*
         * By making this a getter, we open the possibility for a setter in the future.
         * It's been requested a couple times.
         */
        get: function () {
            var state = {};
            if (this.page.size > 0) {
                state.page = { from: this.page.firstItem, to: this.page.lastItem, size: this.page.size };
            }
            if (this.sort.comparator) {
                if (this.sort.comparator instanceof DatagridPropertyComparator) {
                    /*
                     * Special case for the default object property comparator,
                     * we give the property name instead of the actual comparator.
                     */
                    state.sort = { by: this.sort.comparator.prop, reverse: this.sort.reverse };
                }
                else {
                    state.sort = { by: this.sort.comparator, reverse: this.sort.reverse };
                }
            }
            var activeFilters = this.filters.getActiveFilters();
            if (activeFilters.length > 0) {
                state.filters = [];
                for (var _i = 0, activeFilters_1 = activeFilters; _i < activeFilters_1.length; _i++) {
                    var filter = activeFilters_1[_i];
                    if (filter instanceof DatagridStringFilterImpl) {
                        var stringFilter = filter.filterFn;
                        if (stringFilter instanceof DatagridPropertyStringFilter) {
                            /*
                             * Special case again for the default object property filter,
                             * we give the property name instead of the full filter object.
                             */
                            state.filters.push({
                                property: stringFilter.prop,
                                value: filter.value
                            });
                            continue;
                        }
                    }
                    state.filters.push(filter);
                }
            }
            return state;
        },
        enumerable: true,
        configurable: true
    });
    return StateProvider;
}());
export { StateProvider };
StateProvider.decorators = [
    { type: Injectable },
];
/** @nocollapse */
StateProvider.ctorParameters = function () { return [
    { type: FiltersProvider, },
    { type: Sort, },
    { type: Page, },
    { type: StateDebouncer, },
]; };
//# sourceMappingURL=state.provider.js.map